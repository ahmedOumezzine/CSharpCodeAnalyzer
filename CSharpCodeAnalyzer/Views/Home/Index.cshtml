@{
    ViewData["Title"] = "Analyseur de Code C#";
}

<div class="container mt-4">
    <div class="text-center mb-4">
        <h1 class="display-6">🔍 Analyseur de Code C#</h1>
        <p class="lead">Collez votre code C#. Seuls les noms erronés sont soulignés.</p>
    </div>

    <!-- Formulaire -->
    <form asp-action="Analyze" method="post">
        <div class="mb-3">
            <label for="sourceCode" class="form-label">Code C# à analyser</label>
            <textarea name="sourceCode"
                      id="sourceCode"
                      rows="15"
                      class="form-control font-monospace"
                      placeholder="Collez votre code C# ici...">@ViewBag.SourceCode</textarea>
        </div>
        <button type="submit" class="btn btn-primary">Analyser</button>
    </form>

    @{
        var resultJson = ViewBag.AnalysisResultJson as string;
        CodeAnalyzer.Core.Models.AnalysisResult result = null;

        if (!string.IsNullOrEmpty(resultJson))
        {
            try
            {
                result = System.Text.Json.JsonSerializer.Deserialize<CodeAnalyzer.Core.Models.AnalysisResult>(resultJson);
            }
            catch { }
        }
    }

    <!-- Affichage du code -->
    @if (result != null && !string.IsNullOrEmpty(ViewBag.SourceCode))
    {
        <div class="mt-5">
            <h2>📄 Code analysé</h2>
            <p><strong>Problèmes détectés :</strong> <span class="badge bg-danger">@result.TotalIssues</span></p>

            <!-- Code avec mots soulignés -->
            <pre class="border p-3 bg-light" style="font-family: 'Courier New', monospace; white-space: pre; line-height: 1.6;">
                    @{
                            var lines = (ViewBag.SourceCode as string).Split('\n');
                            var errors = result.Categories
                                    .SelectMany(c => c.Issues.Where(i => !i.Passed && i.LineNumber > 0 && i.ColumnNumber > 0 && !string.IsNullOrEmpty(i.CodeSnippet)))
                                    .OrderByDescending(e => e.ColumnNumber) // Important : traiter de droite à gauche
                                    .ToList();

                            for (int i = 0; i < lines.Length; i++)
                            {
                                    var lineNumber = i + 1;
                                    var line = lines[i];
                                    var errorsOnLine = errors.Where(e => e.LineNumber == lineNumber).ToList();

                                    if (errorsOnLine.Count == 0)
                                    {
                                            @line
                
                                            <br />
                                            continue;
                                    }

                                    var modifiedLine = line;

                                    foreach (var error in errorsOnLine)
                                    {
                                            var col = error.ColumnNumber - 1; // 0-based
                                            var length = error.CodeSnippet.Length;

                                            // Vérifier que la position est valide
                                            if (col < 0 || col >= modifiedLine.Length || col + length > modifiedLine.Length)
                                                    continue;

                                            // Extraire le mot à cette position
                                            var actualWord = modifiedLine.Substring(col, length);
                                            if (actualWord != error.CodeSnippet)
                                                    continue; // Éviter les faux remplacements

                                            var before = modifiedLine.Substring(0, col);
                                            var after = modifiedLine.Substring(col + length);
                                            var replacement = $"<span class='error-word' data-snippet='{HtmlEncoder.Encode(error.CodeSnippet)}' style='background-color:#ffebee;border-bottom:2px solid #f44336;cursor:pointer;'>{error.CodeSnippet}</span>";

                                            modifiedLine = before + replacement + after;
                                    }

                                    @Html.Raw(modifiedLine)
                            
                                    <br />
                            }
                    }
                </pre>
        </div>

        <!-- Détail des erreurs -->
        <div class="mt-4">
            <h3>📋 Détail des erreurs</h3>
            @foreach (var category in result.Categories)
            {
                if (category.Issues.Any(i => !i.Passed))
                {
                    <div class="card mb-3">
                        <div class="card-header bg-warning text-dark">
                            <h5 class="mb-0">@category.Name</h5>
                        </div>
                        <ul class="list-group list-group-flush">
                            @foreach (var issue in category.Issues.Where(i => !i.Passed))
                            {
                                <li class="list-group-item">
                                    <strong>@issue.RuleName</strong><br />
                                    <small>Ligne @issue.LineNumber, Colonne @issue.ColumnNumber : @issue.Description</small>
                                    @if (!string.IsNullOrEmpty(issue.Suggestion))
                                    {
                                        <br />
                    
                                        <em>@issue.Suggestion</em>
                                    }
                                </li>
                            }
                        </ul>
                    </div>
                }
            }
        </div>
    }
</div>

<!-- Popup -->
<div id="errorPopup" class="popup hidden">
    <div class="popup-content">
        <h5 id="popupTitle">Erreur</h5>
        <p id="popupDescription"></p>
        <button onclick="closePopup()">Fermer</button>
    </div>
</div>

<!-- Style -->
<style>
    .popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 1rem;
        box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        z-index: 1000;
        max-width: 400px;
    }

        .popup.hidden {
            display: none;
        }

        .popup button {
            background-color: #007bff;
            color: white;
            border: none;
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
        }
</style>

<!-- JavaScript -->
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const popup = document.getElementById('errorPopup');
        const popupTitle = document.getElementById('popupTitle');
        const popupDescription = document.getElementById('popupDescription');

        // Charger les erreurs
        const resultJson = @Html.Raw(resultJson ?? "null");
        const errors = {};

        if (resultJson) {
            resultJson.Categories.forEach(cat => {
                cat.Issues.forEach(issue => {
                    if (!issue.Passed && issue.CodeSnippet) {
                        const decoded = decodeHtml(issue.CodeSnippet);
                        errors[decoded] = {
                            rule: issue.RuleName,
                            description: issue.Description,
                            suggestion: issue.Suggestion || ''
                        };
                    }
                });
            });
        }

        function decodeHtml(html) {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }

        // Clic sur les mots soulignés
        document.querySelectorAll('.error-word').forEach(el => {
            el.addEventListener('click', function () {
                const word = decodeHtml(this.getAttribute('data-snippet'));
                const error = errors[word];
                if (error) {
                    popupTitle.textContent = error.rule;
                    popupDescription.innerHTML = `
                        <strong>${error.description}</strong>
                        ${error.suggestion ? `<br><em>${error.suggestion}</em>` : ''}
                    `;
                    popup.classList.remove('hidden');
                }
            });
        });

        // Fermer popup
        window.onclick = e => {
            if (e.target === popup) {
                popup.classList.add('hidden');
            }
        };

        function closePopup() {
            popup.classList.add('hidden');
        }
    });
</script>