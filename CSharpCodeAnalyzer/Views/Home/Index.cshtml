@{
    ViewData["Title"] = "Analyseur de Code C#";

    var result = ViewBag.Result as CodeAnalyzer.Core.Models.AnalysisResult;
    var formattedCode = result?.FormattedCode ?? "";
    var issues = new List<CodeAnalyzer.Core.Models.RuleResult>();

    if (result != null)
    {
        issues = result.Categories
            .SelectMany(c => c.Issues.Where(i => !i.Passed && !string.IsNullOrEmpty(i.CodeSnippet)))
            .GroupBy(i => i.CodeSnippet)
            .Select(g => g.First())
            .OrderByDescending(i => i.CodeSnippet.Length)
            .ToList();
    }

    string GetSuggestion(CodeAnalyzer.Core.Models.RuleResult issue)
    {
        if (string.IsNullOrEmpty(issue.CodeSnippet)) return "";

        if (issue.RuleName.Contains("PascalCase") || issue.RuleName.Contains("majuscule"))
            return char.ToUpper(issue.CodeSnippet[0]) + issue.CodeSnippet.Substring(1);
        if (issue.RuleName.Contains("camelCase") || issue.RuleName.Contains("minuscule"))
            return char.ToLower(issue.CodeSnippet[0]) + issue.CodeSnippet.Substring(1);
        if (issue.RuleName.Contains("p"))
            return "_" + char.ToLower(issue.CodeSnippet[1]) + issue.CodeSnippet.Substring(2);

        return issue.CodeSnippet;
    }
}

<div class="container mt-5">
    <div class="text-center mb-4">
        <h1 class="display-5"><i class="fas fa-code"></i> Analyseur de Code C#</h1>
        <p class="lead">Cliquez sur un mot erroné pour corriger.</p>
    </div>

    <!-- Formulaire -->
    <form asp-action="Analyze" method="post">
        <div class="card">
            <div class="card-body">
                <label for="sourceCode" class="form-label">Code C# à analyser</label>
                <textarea 
                    name="sourceCode" 
                    id="sourceCode" 
                    rows="10" 
                    class="form-control font-monospace">@ViewBag.SourceCode</textarea>
            </div>
            <div class="card-footer text-end">
                <button type="submit" class="btn btn-primary btn-lg">
                    <i class="fas fa-search"></i> Analyser
                </button>
            </div>
        </div>
    </form>

    @if (result != null && !string.IsNullOrEmpty(formattedCode))
    {
        var displayCode = Html.Encode(formattedCode);

        foreach (var issue in issues)
        {
            var snippet = Html.Encode(issue.CodeSnippet);
            var suggestion = GetSuggestion(issue);
            var encodedSuggestion = Html.Encode(suggestion);
            var replacement = $"<span class=\"error-clickable\" data-current=\"{snippet}\" data-suggestion=\"{encodedSuggestion}\" style=\"background-color:#ffebee;border-bottom:2px solid #f44336;cursor:pointer;\" title=\"Cliquez pour corriger\">{snippet}</span>";

            displayCode = System.Text.RegularExpressions.Regex.Replace(
                displayCode,
                @"\b" + System.Text.RegularExpressions.Regex.Escape(snippet) + @"\b",
                replacement
            );
        }

        <div class="row mt-4">
            <!-- Code Formaté -->
            <div class="col-12 col-lg-7 mb-4">
                <div class="card">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0"><i class="fas fa-file-code"></i> Code Formaté</h5>
                    </div>
                    <div class="card-body p-3">
                        <pre id="formattedCode" class="border p-3 bg-light mb-0"
                             style="font-family: 'Courier New', monospace; white-space: pre; line-height: 1.6;">
@Html.Raw(displayCode)
                        </pre>
                    </div>
                </div>
            </div>

            <!-- Table des erreurs -->
            <div class="col-12 col-lg-5">
                <div class="card">
                    <div class="card-header bg-danger text-white">
                        <h5 class="mb-0"><i class="fas fa-exclamation-triangle"></i> Erreurs détectées</h5>
                    </div>
                    <div class="card-body">
                        <p><strong>Total :</strong> <span class="badge bg-danger">@result.TotalIssues</span></p>

                        @if (result.TotalIssues == 0)
                        {
                            <div class="alert alert-success">✅ Aucune erreur</div>
                        }
                        else
                        {
                            <div class="table-responsive">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Mot</th>
                                            <th>Suggestion</th>
                                            <th>Action</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var issue in issues)
                                        {
                                            var suggestion = GetSuggestion(issue);
                                            <tr>
                                                <td><code>@issue.CodeSnippet</code></td>
                                                <td><code>@suggestion</code></td>
                                                <td>
                                                    <button class="btn btn-sm btn-outline-success fix-btn"
                                                            data-current="@issue.CodeSnippet"
                                                            data-suggestion="@suggestion">
                                                        ✅ Corriger
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Popup -->
<div id="errorPopup" class="modal fade" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">🔧 Corriger</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <p><strong>Remplacer</strong> <code id="popupCurrent"></code> <strong>par</strong> <code id="popupNew"></code> ?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-success" id="applyFix">Appliquer</button>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // ✅ Sérialiser en JSON pour éviter les problèmes d'échappement
    let currentCode = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(formattedCode));
    const errorList = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
        issues.Select(i => new {
            current = i.CodeSnippet,
            suggestion = GetSuggestion(i)
        }).ToList()
    ));

    function openFixPopup(current, suggestion) {
        console.log("🔧 Ouvrir popup:", { current, suggestion });

        document.getElementById('popupCurrent').textContent = current;
        document.getElementById('popupNew').textContent = suggestion;

        document.getElementById('applyFix').onclick = function () {
            currentCode = currentCode.replace(current, suggestion);
            updateDisplay();
            bootstrap.Modal.getInstance(document.getElementById('errorPopup')).hide();
        };

        new bootstrap.Modal(document.getElementById('errorPopup')).show();
    }

    function updateDisplay() {
        let displayCode = currentCode;

        errorList.forEach(item => {
            const regex = new RegExp("\\b" + item.current.replace(/[.*+?^${}()|[\]\\]/g, '\\$&') + "\\b", "g");
            const escapedSuggestion = item.suggestion
                .replace(/&/g, '&amp;')
                .replace(/</g, '<')
                .replace(/>/g, '>');

            const replacement = `<span class="error-clickable" data-current="${item.current}" data-suggestion="${item.suggestion}" style="background-color:#ffebee;border-bottom:2px solid #f44336;cursor:pointer;">${item.current}</span>`;
            displayCode = displayCode.replace(regex, replacement);
        });

        const container = document.getElementById('formattedCode');
        if (container) {
            container.innerHTML = displayCode;
            attachEventListeners();
        }
    }

    function attachEventListeners() {
        document.querySelectorAll('.error-clickable').forEach(el => {
            el.onclick = () => {
                const current = el.getAttribute('data-current');
                const suggestion = el.getAttribute('data-suggestion');
                openFixPopup(current, suggestion);
            };
        });

        document.querySelectorAll('.fix-btn').forEach(btn => {
            btn.onclick = () => {
                const current = btn.getAttribute('data-current');
                const suggestion = btn.getAttribute('data-suggestion');
                openFixPopup(current, suggestion);
            };
        });
    }

    document.addEventListener('DOMContentLoaded', () => {
        updateDisplay(); // Initialiser l'affichage
    });
</script>

<style>
    .error-clickable:hover {
        background-color: #ffcdd2 !important;
        border-radius: 2px;
    }
</style>