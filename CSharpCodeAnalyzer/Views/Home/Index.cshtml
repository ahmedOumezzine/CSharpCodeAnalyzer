@using CodeAnalyzer.Core.Models

@{
    ViewData["Title"] = "Analyseur de Code C#";

    var result = ViewBag.Result as AnalysisResult;
    var formattedCode = result?.FormattedCode ?? "";

    // ✅ Regrouper toutes les erreurs par mot (même mot → plusieurs erreurs)
    var issuesBySnippet = result?.Categories
        .SelectMany(c => c.Issues.Where(i => !i.Passed && !string.IsNullOrEmpty(i.CodeSnippet)))
        .GroupBy(i => i.CodeSnippet)
        .ToDictionary(g => g.Key, g => g.ToList()) ?? new Dictionary<string, List<RuleResult>>();

    string GetSuggestion(RuleResult issue)
    {
        if (string.IsNullOrEmpty(issue.CodeSnippet)) return "";

        if (issue.RuleName.Contains("PascalCase") || issue.RuleName.Contains("majuscule"))
            return char.ToUpper(issue.CodeSnippet[0]) + issue.CodeSnippet.Substring(1);
        if (issue.RuleName.Contains("camelCase") || issue.RuleName.Contains("minuscule"))
            return char.ToLower(issue.CodeSnippet[0]) + issue.CodeSnippet.Substring(1);
        if (issue.RuleName.Contains("p"))
            return "_" + char.ToLower(issue.CodeSnippet[1]) + issue.CodeSnippet.Substring(2);

        return issue.CodeSnippet;
    }

    string GetPrMessageForSnippet(string snippet)
    {
        if (!issuesBySnippet.ContainsKey(snippet)) return "// Aucune erreur";

        var messages = issuesBySnippet[snippet].Select(i => i.PrMessage ?? $"// ❌ `{i.CodeSnippet}` → {i.Description}");
        return string.Join("\n//\n", messages);
    }
}

<div class="container mt-5">
    <div class="text-center mb-4">
        <h1 class="display-5"><i class="fas fa-code"></i> Analyseur de Code C#</h1>
        <p class="lead">Cliquez sur un mot erroné pour voir toutes les erreurs.</p>
    </div>

    <!-- Formulaire -->
    <form asp-action="Analyze" method="post">
        <div class="card mb-4">
            <div class="card-body">
                <label for="sourceCode" class="form-label">Code C# à analyser</label>
                <textarea 
                    name="sourceCode" 
                    id="sourceCode" 
                    rows="10" 
                    class="form-control font-monospace">@ViewBag.SourceCode</textarea>
            </div>
            <div class="card-footer text-end">
                <button type="submit" class="btn btn-primary">Analyser</button>
            </div>
        </div>
    </form>

    @if (result != null && !string.IsNullOrEmpty(formattedCode))
    {
        var displayCode = Html.Encode(formattedCode);

        // ✅ Remplacer chaque mot erroné par un span cliquable
        foreach (var snippet in issuesBySnippet.Keys)
        {
            var encodedSnippet = Html.Encode(snippet);
            var replacement = $"<span class=\"error-clickable\" data-code-snippet=\"{encodedSnippet}\" style=\"background-color:#ffebee;border-bottom:2px solid #f44336;cursor:pointer;\" title=\"Cliquez pour voir les erreurs\">{encodedSnippet}</span>";

            displayCode = System.Text.RegularExpressions.Regex.Replace(
                displayCode,
                @"\b" + System.Text.RegularExpressions.Regex.Escape(snippet) + @"\b",
                replacement
            );
        }

        <div class="row">
            <!-- Code Formaté -->
            <div class="col-12 col-lg-7 mb-4">
                <div class="card">
                    <div class="card-header bg-dark text-white">
                        <h5 class="mb-0"><i class="fas fa-file-code"></i> Code Formaté</h5>
                    </div>
                    <div class="card-body p-3">
                        <pre id="formattedCode" class="border p-3 bg-light mb-0"
                             style="font-family: 'Courier New', monospace; white-space: pre; line-height: 1.6;">
@Html.Raw(displayCode)
                        </pre>
                    </div>
                </div>
            </div>

            <!-- Détail par analyseur -->
            <div class="col-12 col-lg-5">
                @if (result.Categories.Any())
                {
                    foreach (var category in result.Categories)
                    {
                        var issuesInCategory = category.Issues.Where(i => !i.Passed).ToList();
                        if (!issuesInCategory.Any()) continue;

                        <div class="card mb-4">
                            <div class="card-header 
                                @(category.Name.Contains("Nommage") ? "bg-danger" :
                                  category.Name.Contains("Complexité") ? "bg-warning" :
                                  category.Name.Contains("Documentation") ? "bg-info" :
                                  category.Name.Contains("inutilisé") ? "bg-secondary" :
                                  category.Name.Contains("Doublon") ? "bg-dark" :
                                  category.Name.Contains("Exception") ? "bg-danger" :
                                  category.Name.Contains("Taille") ? "bg-primary" : "bg-light")
                                text-white">
                                <h5 class="mb-0">@category.Name (@issuesInCategory.Count)</h5>
                            </div>
                            <div class="card-body">
                                <ul class="list-unstyled">
                                    @foreach (var issue in issuesInCategory)
                                    {
                                        <li class="mb-3">
                                            <div class="d-flex justify-content-between">
                                                <strong>@(string.IsNullOrEmpty(issue.CodeSnippet) ? "—" : $"<code>{issue.CodeSnippet}</code>")</strong>
                                            </div>
                                            <small>@issue.Description</small>
                                            @if (!string.IsNullOrEmpty(issue.Suggestion))
                                            {
                                                <div class="mt-1">
                                                    <em>Suggestion : <code>@issue.Suggestion</code></em>
                                                </div>
                                            }
                                            @if (issue.LineNumber > 0)
                                            {
                                                <div class="text-muted small mt-1">
                                                    <i class="fas fa-line"></i> Ligne @issue.LineNumber
                                                </div>
                                            }
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-success">✅ Aucune erreur détectée</div>
                }
            </div>
        </div>
    }
</div>

<!-- Popup -->
<div id="errorPopup" class="modal fade" tabindex="-1">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-warning text-dark">
                <h5 class="modal-title">🔍 Erreurs pour <code id="popupSnippet"></code></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div id="errorDetails">
                    <!-- Rempli par JS -->
                </div>

                <div class="mt-4">
                    <h6><i class="fas fa-paste"></i> 📋 Message pour PR</h6>
                    <pre id="prMessage" class="border p-3 bg-light" style="white-space: pre-wrap;"></pre>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                <button type="button" class="btn btn-outline-info" id="copyPrMessage">📋 Copier PR</button>
            </div>
        </div>
    </div>
</div>

<!-- Scripts -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
    // ✅ Toutes les erreurs
const allIssues = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(
    result?.Categories
        .SelectMany(c => c.Issues.Where(i => !i.Passed && !string.IsNullOrEmpty(i.CodeSnippet)))
        .Select(i => new {
            CodeSnippet = i.CodeSnippet,
            RuleName = i.RuleName,
            Description = i.Description,
            Suggestion = i.Suggestion ?? "",
            Category = i.Category,
            PrMessage = i.PrMessage ?? $"// ❌ `{i.CodeSnippet}` → {i.Description}"
        })
        .Cast<object>()  // ✅ Convertit en IEnumerable<object>
        .ToList()        // ✅ Devient List<object>
    ?? new List<object>()  // ✅ Même type
));

    // Ouvrir popup
    function openErrorPopup(snippet) {
        const issues = allIssues.filter(i => i.CodeSnippet === snippet);
        const detailsContainer = document.getElementById('errorDetails');
        const prMessageContainer = document.getElementById('prMessage');
        const popupSnippet = document.getElementById('popupSnippet');

        popupSnippet.textContent = snippet;
        detailsContainer.innerHTML = '';
        prMessageContainer.textContent = '';

        if (issues.length === 0) {
            detailsContainer.innerHTML = '<p>Aucune erreur détectée.</p>';
            return;
        }

        // Afficher chaque erreur
        issues.forEach(issue => {
            const div = document.createElement('div');
            div.className = 'mb-3 p-2 border rounded bg-light';
            div.innerHTML = `
                <strong class="text-danger">❌ ${issue.RuleName}</strong><br>
                <small>${issue.Description}</small><br>
                <em>Suggestion : <code>${issue.Suggestion}</code></em>
            `;
            detailsContainer.appendChild(div);
        });

        // Générer message PR
        const prMessages = issues.map(i => i.PrMessage);
        prMessageContainer.textContent = prMessages.join('\n//\n');

        // Bouton "Copier PR"
        document.getElementById('copyPrMessage').onclick = function () {
            navigator.clipboard.writeText(prMessageContainer.textContent).then(() => {
                const btn = document.getElementById('copyPrMessage');
                btn.textContent = '✅ Copié !';
                setTimeout(() => btn.textContent = '📋 Copier PR', 2000);
            });
        };

        // Ouvrir modal
        new bootstrap.Modal(document.getElementById('errorPopup')).show();
    }

    // Attacher événements
    document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.error-clickable').forEach(el => {
            el.onclick = function () {
                const snippet = this.getAttribute('data-code-snippet');
                openErrorPopup(snippet);
            };
        });
    });
</script>

<style>
    .error-clickable {
        background-color: #ffebee;
        border-bottom: 2px solid #f44336;
        cursor: pointer;
        border-radius: 2px;
        padding: 0 2px;
    }

    .error-clickable:hover {
        background-color: #ffcdd2;
    }
</style>